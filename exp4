#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>
#include <limits>
#include <functional>

using namespace std;

class Graph {
public:
    void addEdge(int u, int v, int weight);
    void BFS(int start);
    void DFS(int start);
    void Dijkstra(int start);
    void Prim();
private:
    struct Edge {
        int dest;
        int weight;
        bool operator>(const Edge& other) const { return weight > other.weight; }
    };
    vector<vector<Edge>> adjList;
};

void Graph::addEdge(int u, int v, int weight) {
    if (u >= adjList.size()) adjList.resize(u + 1);
    if (v >= adjList.size()) adjList.resize(v + 1);
    adjList[u].push_back({ v, weight });
    adjList[v].push_back({ u, weight }); // 如果是无向图，需要添加双向边
}
void Graph::BFS(int start) {
    queue<int> q;
    unordered_set<int> visited;
    q.push(start);
    visited.insert(start);

    while (!q.empty()) {
        int vertex = q.front();
        q.pop();
        cout << "Visited: " << vertex << endl;

        for (auto& edge : adjList[vertex]) {
            if (visited.find(edge.dest) == visited.end()) {
                visited.insert(edge.dest);
                q.push(edge.dest);
            }
        }
    }
}

void Graph::DFS(int start) {
    function<void(int)> dfsVisit = [&](int vertex) {
        cout << "Visited: " << vertex << endl;
        for (auto& edge : adjList[vertex]) {
            if (adjList[edge.dest].empty() || adjList[edge.dest][0].weight == -1) {
                adjList[edge.dest][0].weight = -2; // 标记为已访问
                dfsVisit(edge.dest);
            }
        }
        };

    // 初始化顶点状态
    for (auto& list : adjList) {
        if (!list.empty()) {
            list[0].weight = -1; // 表示未访问
        }
    }

    dfsVisit(start);
}

void Graph::Dijkstra(int start) {
    priority_queue<Edge, vector<Edge>, greater<Edge>> pq;
    vector<int> dist(adjList.size(), numeric_limits<int>::max());
    vector<bool> visited(adjList.size(), false);

    dist[start] = 0;
    pq.push({ start, 0 });

    while (!pq.empty()) {
        int u = pq.top().dest;
        pq.pop();

        if (visited[u]) continue;
        visited[u] = true;

        for (auto& edge : adjList[u]) {
            int v = edge.dest;
            int weight = edge.weight;

            if (!visited[v] && dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                pq.push({ v, dist[v] });
            }
        }
    }

    // 打印最短路径距离
    for (size_t i = 0; i < dist.size(); ++i) {
        cout << "Distance to " << i << ": " << dist[i] << endl;
    }
}

void Graph::Prim() {
    priority_queue<Edge, vector<Edge>, greater<Edge>> pq;
    vector<int> key(adjList.size(), numeric_limits<int>::max());
    vector<bool> mstSet(adjList.size(), false);

    key[0] = 0;
    pq.push({ 0, 0 });

    while (!pq.empty()) {
        int u = pq.top().dest;
        pq.pop();

        if (mstSet[u]) continue;
        mstSet[u] = true;

        for (auto& edge : adjList[u]) {
            int v = edge.dest;
            int weight = edge.weight;

            if (!mstSet[v] && weight < key[v]) {
                pq.push({ v, weight });
                key[v] = weight;
            }
        }
    }

    // 打印MST权重总和
    int sum = 0;
    for (int k : key) {
        sum += k;
    }
    cout << "Total MST weight: " << sum << endl;
}

int main() {
    Graph g;
    g.addEdge(0, 1, 4);
    g.addEdge(0, 7, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 7, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 8, 2);
    g.addEdge(2, 5, 4);
    g.addEdge(3, 4, 9);
    g.addEdge(3, 5, 14);
    g.addEdge(4, 5, 10);
    g.addEdge(5, 6, 2);
    g.addEdge(6, 7, 1);
    g.addEdge(6, 8, 6);
    g.addEdge(7, 8, 7);

    cout << "BFS from vertex 0:" << endl;
    g.BFS(0);

    cout << "DFS from vertex 0:" << endl;
    g.DFS(0);

    cout << "Dijkstra shortest path from vertex 0:" << endl;
    g.Dijkstra(0);

    cout << "Prim's minimum spanning tree total weight:" << endl;
    g.Prim();

    return 0;
}
