#include <iostream>
#include <vector>
#include <algorithm> // for std::swap, std::random_shuffle
#include <chrono>
#include <string>

// Define sort functions with descriptive names
void bubbleSort(std::vector<int>& arr);
void insertionSort(std::vector<int>& arr);
void selectionSort(std::vector<int>& arr);
void mergeSort(std::vector<int>& arr);
void quickSort(std::vector<int>& arr, int low, int high);
void heapSort(std::vector<int>& arr);

// Helper function to measure the time taken by a sort function
template<typename Func>
double measureSortTime(Func sortFunc, std::vector<int>& data) {
    auto start = std::chrono::high_resolution_clock::now();
    sortFunc(data);
    auto end = std::chrono::high_resolution_clock::now();
    return std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();
}

// Test each sorting algorithm with different types of input data
void testSortingAlgorithms() {
    const int size = 1000; // Reduced size for demonstration purposes
    std::vector<int> sortedData(size), reverseData(size), randomData(size);

    // Initialize data sets
    for (int i = 0; i < size; ++i) {
        sortedData[i] = i;
        reverseData[size - i - 1] = i;
    }
    std::random_shuffle(randomData.begin(), randomData.end());

    struct SortTest {
        std::string name;
        void (*func)(std::vector<int>&); // Pointer to a function that takes a vector reference
    };

    // Array of tests to perform
    SortTest tests[] = {
        {"Bubble Sort", bubbleSort},
        {"Insertion Sort", insertionSort},
        {"Selection Sort", selectionSort},
        {"Merge Sort", mergeSort},
        {"Quick Sort", [](std::vector<int>& arr) { quickSort(arr, 0, arr.size() - 1); }},
        {"Heap Sort", heapSort}
    };

    // Measure and print times for each sort function
    for (auto& test : tests) {
        std::cout << "Testing " << test.name << ":\n";
        std::vector<int> testData;

        // Copy datasets before each test
        testData = sortedData;
        std::cout << "Sorted: " << measureSortTime(test.func, testData) << " us\n";

        testData = reverseData;
        std::cout << "Reverse: " << measureSortTime(test.func, testData) << " us\n";

        testData = randomData;
        std::cout << "Random: " << measureSortTime(test.func, testData) << " us\n\n";
    }
}

// Implementations of the sorting algorithms

void bubbleSort(std::vector<int>& arr) {
    int n = arr.size();
    bool swapped;
    for (int i = 0; i < n - 1; ++i) {
        swapped = false;
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                std::swap(arr[j], arr[j + 1]);
                swapped = true;
            }
        }
        if (!swapped) break;
    }
}

void insertionSort(std::vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; ++i) {
        int key = arr[i];
        int j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            --j;
        }
        arr[j + 1] = key;
    }
}

void selectionSort(std::vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n; ++i) {
        int minIndex = i;
        for (int j = i + 1; j < n; ++j)
            if (arr[j] < arr[minIndex])
                minIndex = j;
        std::swap(arr[i], arr[minIndex]);
    }
}

void merge(std::vector<int>& arr, int left, int mid, int right) {
    std::vector<int> temp(right - left + 1);
    int i = left, j = mid + 1, k = 0;

    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        }
        else {
            temp[k++] = arr[j++];
        }
    }

    while (i <= mid) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];

    for (i = left, k = 0; i <= right; ++i, ++k) arr[i] = temp[k];
}

void mergeSort(std::vector<int>& arr) {
    if (arr.size() <= 1) return;
    int mid = arr.size() / 2;
    std::vector<int> left(arr.begin(), arr.begin() + mid);
    std::vector<int> right(arr.begin() + mid, arr.end());
    mergeSort(left);
    mergeSort(right);
    merge(arr, 0, mid - 1, arr.size() - 1);
}

void partition(std::vector<int>& arr, int low, int high, int& pi) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; ++j) {
        if (arr[j] <= pivot) {
            ++i;
            std::swap(arr[i], arr[j]);
        }
    }
    std::swap(arr[i + 1], arr[high]);
    pi = i + 1;
}

void quickSort(std::vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi;
        partition(arr, low, high, pi);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void heapify(std::vector<int>& arr, int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        std::swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(std::vector<int>& arr) {
    int n = arr.size();

    for (int i = n / 2 - 1; i >= 0; --i)
        heapify(arr, n, i);

    for (int i = n - 1; i >= 0; --i) {
        std::swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

int main() {
    testSortingAlgorithms();
    return 0;
}
